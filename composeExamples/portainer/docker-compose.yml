# docker stack deploy --compose-file=docker-compose.yml dockpond
version: '3.1'

services:
  cassandra-1:
    image: cassandra:3.11.2
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    # In case this is the first time starting up cassandra we need to ensure
    # that all nodes do not start up at the same time. Cassandra has a
    # 2 minute rule i.e. 2 minutes between each node boot up. Booting up
    # nodes simultaneously is a mistake. This only needs to happen the firt
    # time we bootup. Configuration below assumes if the Cassandra data
    # directory is empty it means that we are starting up for the first
    # time.
    command: bash -c 'if [ -z "$$(ls -A /var/lib/cassandra/)" ] ; then sleep 0; fi && /docker-entrypoint.sh cassandra -f'
    environment:
      CASSANDRA_BROADCAST_ADDRESS: cassandra-1
    ports:
    - "7000"

  cassandra-2:
    image: cassandra:3.11.2
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    # In case this is the first time starting up cassandra we need to ensure
    # that all nodes do not start up at the same time. Cassandra has a
    # 2 minute rule i.e. 2 minutes between each node boot up. Booting up
    # nodes simultaneously is a mistake. This only needs to happen the firt
    # time we bootup. Configuration below assumes if the Cassandra data
    # directory is empty it means that we are starting up for the first
    # time.
    command: bash -c 'if [ -z "$$(ls -A /var/lib/cassandra/)" ] ; then sleep 120; fi && /docker-entrypoint.sh cassandra -f'
    environment:
      CASSANDRA_BROADCAST_ADDRESS: cassandra-2
      CASSANDRA_SEEDS: cassandra-1
    depends_on:
      - cassandra-1
    ports:
    - "7000"

  cassandra-3:
    image: cassandra:3.11.2
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    # In case this is the first time starting up cassandra we need to ensure
    # that all nodes do not start up at the same time. Cassandra has a
    # 2 minute rule i.e. 2 minutes between each node boot up. Booting up
    # nodes simultaneously is a mistake. This only needs to happen the firt
    # time we bootup. Configuration below assumes if the Cassandra data
    # directory is empty it means that we are starting up for the first
    # time.
    command: bash -c 'if [ -z "$$(ls -A /var/lib/cassandra/)" ] ; then sleep 240; fi && /docker-entrypoint.sh cassandra -f'
    environment:
      CASSANDRA_BROADCAST_ADDRESS: cassandra-3
      CASSANDRA_SEEDS: cassandra-1
    depends_on:
      - cassandra-2
    ports:
    - "7000"

  kong-database:
    image: postgres:9.4
    deploy:
      restart_policy:
        condition: any
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migration:
    image: kong:0.12.0
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
    command: kong migrations up
    deploy:
      restart_policy:
        condition: on-failure

  kong:
    #tried changing to kong:0.12.0-alpine but didn't work as health check needs curl
    image: kong:0.12.0
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_DATABASE=kong
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
    ports:
      - 80:8000
      - 443:8443
    healthcheck:
      test: ["CMD-SHELL", "curl -I -s -L http://127.0.0.1:8000 || exit 1"]
      interval: 5s
      retries: 10

  dockpond_dev:
    image: metcarob/dockpond:0.0.9
    #ports:
    #  - 80:80
    environment:
      #- APIAPP_ENVIROMENT=DEV Default
      - APIAPP_APIURL=${EXTURL}:5080/dev/dockpond/api
      - APIAPP_APIDOCSURL=${EXTURL}:5080/dev/dockpond/apidocs
      #- APIAPP_CASS_IPLIST="['cassandra-1','cassandra-2','cassandra-3']" Default
      #- APIAPP_CASS_REPLICATION="{'class':'SimpleStrategy','replication_factor':'3'}" Default
      - APIAPP_EBOAPIURL=${EXTURL}:5080/dev/dockpond/ebos
      - APIAPP_EBOAPIDOCSURL=${EXTURL}:5080/dev/dockpond/ebodocs
    deploy:
      restart_policy:
        condition: any

  dockpond_test:
    image: metcarob/dockpond:0.0.9
    #ports:
    #  - 80:80
    environment:
      - APIAPP_ENVIROMENT=TEST
      - APIAPP_APIURL=${EXTURL}:5080/test/dockpond/api
      - APIAPP_APIDOCSURL=${EXTURL}:5080/test/dockpond/apidocs
      #- APIAPP_CASS_IPLIST="['cassandra-1','cassandra-2','cassandra-3']" Default
      #- APIAPP_CASS_REPLICATION="{'class':'SimpleStrategy','replication_factor':'3'}" Default
      - APIAPP_EBOAPIURL=${EXTURL}:5080/test/dockpond/ebos
      - APIAPP_EBOAPIDOCSURL=${EXTURL}:5080/test/dockpond/ebodocs
    deploy:
      restart_policy:
        condition: any

  #Add API's to kong to forward requests to dockpond
  kong-addapis-dockpond:
    image: byrnedo/alpine-curl
    deploy:
      restart_policy:
        condition: on-failure
        delay: 6s
    entrypoint: "/bin/sh"
    command:    "-c \" \
                   (curl -i -X POST \
                     --url http://kong:8001/apis/ \
                     --data 'name=dockpondapi_dev' \
                     --data 'uris=/dev/dockpond/api' \
                     --data 'upstream_url=http://dockpond_dev:80/api' \
                     --data 'https_only=false') && \
                   (curl -i -X POST \
                     --url http://kong:8001/apis/ \
                     --data 'name=dockpondapidocs_dev' \
                     --data 'uris=/dev/dockpond/apidocs' \
                     --data 'upstream_url=http://dockpond_dev:80/apidocs' \
                     --data 'https_only=false') && \
                   (curl -i -X POST \
                     --url http://kong:8001/apis/ \
                     --data 'name=dockpond_dev' \
                     --data 'uris=/dev/dockpond/frontend' \
                     --data 'upstream_url=http://dockpond_dev:80/frontend' \
                     --data 'https_only=false') && \
                   (curl -i -X POST \
                     --url http://kong:8001/apis/ \
                     --data 'name=dockpondebodocs_dev' \
                     --data 'uris=/dev/dockpond/ebodocs' \
                     --data 'upstream_url=http://dockpond_dev:80/ebodocs' \
                     --data 'https_only=false') && \
                   (curl -i -X POST \
                     --url http://kong:8001/apis/ \
                     --data 'name=dockpondebos_dev' \
                     --data 'uris=/dev/dockpond/ebos' \
                     --data 'upstream_url=http://dockpond_dev:80/ebos' \
                     --data 'https_only=false') && \
                   (curl -i -X POST \
                     --url http://kong:8001/apis/ \
                     --data 'name=dockpondapi_test' \
                     --data 'uris=/test/dockpond/api' \
                     --data 'upstream_url=http://dockpond_test:80/api' \
                     --data 'https_only=false') && \
                   (curl -i -X POST \
                     --url http://kong:8001/apis/ \
                     --data 'name=dockpondapidocs_test' \
                     --data 'uris=/test/dockpond/apidocs' \
                     --data 'upstream_url=http://dockpond_test:80/apidocs' \
                     --data 'https_only=false') && \
                   (curl -i -X POST \
                     --url http://kong:8001/apis/ \
                     --data 'name=dockpond_test' \
                     --data 'uris=/test/dockpond/frontend' \
                     --data 'upstream_url=http://dockpond_test:80/frontend' \
                     --data 'https_only=false') && \
                   (curl -i -X POST \
                     --url http://kong:8001/apis/ \
                     --data 'name=dockpondebodocs_test' \
                     --data 'uris=/test/dockpond/ebodocs' \
                     --data 'upstream_url=http://dockpond_test:80/ebodocs' \
                     --data 'https_only=false') && \
                   (curl -i -X POST \
                     --url http://kong:8001/apis/ \
                     --data 'name=dockpondebos_test' \
                     --data 'uris=/test/dockpond/ebos' \
                     --data 'upstream_url=http://dockpond_test:80/ebos' \
                     --data 'https_only=false')
                 \""

##The next section starts a UI for kong called konga. 
##We only need a ui for development experimentation and can be removed if no UI is required
## when it is running it can be accessed on port 1337
  konga:
    image: pantsel/konga
    deploy:
      restart_policy:
        condition: on-failure
    ports:
     - 1337:1337
